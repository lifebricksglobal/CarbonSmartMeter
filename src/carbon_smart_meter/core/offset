# src/carbon_smart_meter/core/offset.py
"""
Offset Estimation Engine (Privacy-First, Global Coverage)

GDPR & MiCA-compliant: Primary storage in AWS (EU or SG), encrypted Azure backup.

Estimates CO₂ avoided using verified kWh + region-specific grid intensity.
- NO GPS: User selects region via dropdown
- Fallback: Conservative global average
- Covers 90%+ of world population
"""

from typing import Dict, Optional
from pydantic import BaseModel
import boto3
import azure.identity
import azure.storage.blob as azure_blob

# === GLOBAL GRID INTENSITY (kg CO₂/kWh) - 2024-2025 Estimates ===
GLOBAL_AVG_CO2_PER_KWH = 0.45  # Conservative fallback

GRID_INTENSITY = {
    # High-accuracy regions
    "EU": 0.296,        # EU-27 average
    "US": 0.385,        # US EIA
    "NZ": 0.110,        # NZ hydro-heavy
    "AU": 0.680,        # Australia coal
    "SG": 0.420,        # Singapore gas
    "IN": 0.710,        # India (coal-heavy, 2024) 
    "CN": 0.570,        # China (coal-dominant, 2024)
    "LATAM": 0.180,     # Latin America average (hydro + gas)
    "MENA": 0.490,      # Middle East & North Africa (oil/gas)
    "SSA": 0.520,       # Sub-Saharan Africa (mixed, coal/biomass)
    "WA": 0.480,        # West Africa (gas + oil)
}

# === AZURE BACKUP ===
azure_cred = azure.identity.DefaultAzureCredential()
azure_blob_client = azure_blob.BlobServiceClient(
    account_url="https://backupstorage.blob.core.windows.net",
    credential=azure_cred
)

# === MODELS ===
class OffsetRecord(BaseModel):
    device_id: bytes
    wallet_address: str
    kwh: float
    co2_kg: float
    region: str
    timestamp: int

class OffsetTotals(BaseModel):
    device_co2_kg: float = 0.0
    wallet_co2_kg: float = 0.0


# === SECURE, REGION-AWARE STORAGE ===
class SecureOffsetDB:
    def __init__(self, user_region: str):
        self.user_region = user_region
        self.aws_bucket = "ccm-offsets-eu" if user_region == "EU" else "ccm-offsets-sg"
        self.s3 = boto3.client("s3")

    def insert(self, record: OffsetRecord):
        key = f"offsets/{record.device_id.hex()}/{record.timestamp}.json"
        data = record.json().encode()

        # Primary: AWS
        self.s3.put_object(
            Bucket=self.aws_bucket,
            Key=key,
            Body=data,
            ServerSideEncryption="AES256"
        )

        # Backup: Azure
        blob_client = azure_blob_client.get_blob_client(
            container="offset-backup", blob=key
        )
        blob_client.upload_blob(data, overwrite=True, encryption_scope="gdpr-scope")


# === OFFSET ENGINE ===
class OffsetEngine:
    def __init__(self, db: SecureOffsetDB):
        self.db = db
        self.totals: Dict[str, OffsetTotals] = {}

    def calculate_co2_avoided(self, kwh: float, region: str) -> float:
        """Use region intensity or global fallback"""
        intensity = GRID_INTENSITY.get(region.upper(), GLOBAL_AVG_CO2_PER_KWH)
        return round(kwh * intensity, 6)

    def process_verified_reading(
        self,
        device_id: bytes,
        wallet_address: str,
        kwh: float,
        timestamp: int,
        region: str
    ) -> Optional[OffsetRecord]:
        """Called after mining verification"""
        co2_kg = self.calculate_co2_avoided(kwh, region)

        record = OffsetRecord(
            device_id=device_id,
            wallet_address=wallet_address,
            kwh=kwh,
            co2_kg=co2_kg,
            region=region.upper(),
            timestamp=timestamp
        )

        self.db.insert(record)

        dev_key = device_id.hex()
        if dev_key not in self.totals:
            self.totals[dev_key] = OffsetTotals()
        self.totals[dev_key].device_co2_kg += co2_kg
        self.totals[dev_key].wallet_co2_kg += co2_kg

        return record

    def get_totals(self, device_id: bytes) -> OffsetTotals:
        return self.totals.get(device_id.hex(), OffsetTotals())


# === TEST (No GPS) ===
if __name__ == "__main__":
    db = SecureOffsetDB(user_region="EU")
    engine = OffsetEngine(db)

    test_cases = [
        ("NZ", 5.0),
        ("CN", 3.0),
        ("LATAM", 7.0),
        ("MENA", 2.5),
        ("SSA", 4.0),
    ]

    for region, kwh in test_cases:
        record = engine.process_verified_reading(
            device_id=bytes.fromhex("01" * 32),
            wallet_address="9vA1B2cD...",
            kwh=kwh,
            timestamp=int(time.time()),
            region=region
        )
        print(f"OFFSET: {record.co2_kg} kg CO₂ avoided in {record.region}")